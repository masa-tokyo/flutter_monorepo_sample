---
description: 
globs: 
alwaysApply: true
---
# documentation.mdc

本リポジトリのソースコード上のドキュメンテーションは全て日本語で記載することとします。


## Dart ファイルのドキュメンテーションについて

特に以下のことを遵守してください：

- アルファベットと日本語の間にスペースを入れ、文末は `。` で終えること（例: `PDF ファイルを保存する。`）。
- すべてのパブリックなクラス、関数、メソッド、プロパティに `///` 形式のドキュメンテーションコメントを記載すること。
- コメントは必ず一文の要約から始めること。
  - 最初の文で、その要素の主な目的や役割を簡潔に説明する。
  - 一文要約の後は空行で区切り、詳細説明や補足情報を続けて記載する。
- bool 型の変数やプロパティ（ getter を含む）のドキュメントコメントは、「かどうか」で終わること。
  - 例：
  ```dart
  /// 管理者かどうか。
  bool isAdmin;
  ```
- bool 型ではない変数やプロパティ（ getter を含む）のドキュメントコメントは、名詞句で終わること。
  - 例：
    ```dart
    /// ユーザーの年齢を表す整数値。
    int age;
    ```
- 関数やメソッドのコメントは、動詞で終わること。
  - 例：
    ```dart
    /// 新しいユーザーを追加する。
    void addUser(User user) { ... }
    ```
- コメント内でパラメータや戻り値、例外について説明する場合は、文章の中で自然に説明する。
- コメント内で識別子（クラス名やメソッド名など）を参照する場合は、角括弧（[ ]）で囲む。
- Markdown 記法は可読性を損なわない範囲で利用可能だが、過度な装飾は避けること。
- オーバーライドしたメンバーについては、親クラスで十分な説明がある場合は省略してもよい。

### コメント記法の使い分け

#### `///` ドキュメントコメントを使うべき場合

- **公開 API**: パブリックなクラス、関数、メソッド、プロパティなどのドキュメント化
- **宣言の前にある場合**: パブリックではないクラスや変数、定数、メソッド、プロパティなどの宣言の直前に記載する場合

#### `//` 通常コメントを使うべき場合

- **内部的な説明**: ロジックの説明や実装の詳細
- **一時的なメモ**: TODO や開発中の注意事項

## yaml ファイルのドキュメンテーションについて

特に以下のことを遵守してください：

- 半角文字と全角文字の間にスペースを入れ、文末は `。` で終えること（例: `PDF ファイルを保存する。`）。
- 補足のコメントを簡潔な日本語で記載すること。

---

このルールファイルが参照されていることを確認するために、返答の最初に「✅ documentation.mdc」と記載してください。
ファイルの編集を終えた後、変更内容が上記のルールを遵守していることを確認し、遵守されていない箇所があれば修正を行ってください。その後、返答の最後に「💡 documentation.mdc」と記載してください。